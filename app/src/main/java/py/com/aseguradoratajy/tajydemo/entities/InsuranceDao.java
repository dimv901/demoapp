package py.com.aseguradoratajy.tajydemo.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSURANCE".
*/
public class InsuranceDao extends AbstractDao<Insurance, Long> {

    public static final String TABLENAME = "INSURANCE";

    /**
     * Properties of entity Insurance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdentifyCard = new Property(1, String.class, "identifyCard", false, "IDENTIFY_CARD");
        public final static Property SectionCode = new Property(2, Integer.class, "sectionCode", false, "SECTION_CODE");
        public final static Property SectionDescription = new Property(3, String.class, "sectionDescription", false, "SECTION_DESCRIPTION");
        public final static Property Policy = new Property(4, String.class, "policy", false, "POLICY");
        public final static Property Endorsement = new Property(5, String.class, "endorsement", false, "ENDORSEMENT");
        public final static Property FeeDetail = new Property(6, String.class, "feeDetail", false, "FEE_DETAIL");
        public final static Property Ruc = new Property(7, String.class, "ruc", false, "RUC");
        public final static Property Insurance = new Property(8, String.class, "insurance", false, "INSURANCE");
        public final static Property ComercialPhone = new Property(9, String.class, "comercialPhone", false, "COMERCIAL_PHONE");
        public final static Property ComercialAddress = new Property(10, String.class, "comercialAddress", false, "COMERCIAL_ADDRESS");
        public final static Property ParcitularAddress = new Property(11, String.class, "parcitularAddress", false, "PARCITULAR_ADDRESS");
        public final static Property DateFrom = new Property(12, String.class, "dateFrom", false, "DATE_FROM");
        public final static Property DateTo = new Property(13, String.class, "dateTo", false, "DATE_TO");
        public final static Property Issue = new Property(14, String.class, "issue", false, "ISSUE");
        public final static Property Expiration = new Property(15, String.class, "expiration", false, "EXPIRATION");
        public final static Property Amount = new Property(16, String.class, "amount", false, "AMOUNT");
        public final static Property Payment = new Property(17, String.class, "payment", false, "PAYMENT");
        public final static Property Balance = new Property(18, String.class, "balance", false, "BALANCE");
        public final static Property LastPayment = new Property(19, String.class, "lastPayment", false, "LAST_PAYMENT");
    }


    public InsuranceDao(DaoConfig config) {
        super(config);
    }
    
    public InsuranceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSURANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IDENTIFY_CARD\" TEXT," + // 1: identifyCard
                "\"SECTION_CODE\" INTEGER," + // 2: sectionCode
                "\"SECTION_DESCRIPTION\" TEXT," + // 3: sectionDescription
                "\"POLICY\" TEXT," + // 4: policy
                "\"ENDORSEMENT\" TEXT," + // 5: endorsement
                "\"FEE_DETAIL\" TEXT," + // 6: feeDetail
                "\"RUC\" TEXT," + // 7: ruc
                "\"INSURANCE\" TEXT," + // 8: insurance
                "\"COMERCIAL_PHONE\" TEXT," + // 9: comercialPhone
                "\"COMERCIAL_ADDRESS\" TEXT," + // 10: comercialAddress
                "\"PARCITULAR_ADDRESS\" TEXT," + // 11: parcitularAddress
                "\"DATE_FROM\" TEXT," + // 12: dateFrom
                "\"DATE_TO\" TEXT," + // 13: dateTo
                "\"ISSUE\" TEXT," + // 14: issue
                "\"EXPIRATION\" TEXT," + // 15: expiration
                "\"AMOUNT\" TEXT," + // 16: amount
                "\"PAYMENT\" TEXT," + // 17: payment
                "\"BALANCE\" TEXT," + // 18: balance
                "\"LAST_PAYMENT\" TEXT);"); // 19: lastPayment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSURANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Insurance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identifyCard = entity.getIdentifyCard();
        if (identifyCard != null) {
            stmt.bindString(2, identifyCard);
        }
 
        Integer sectionCode = entity.getSectionCode();
        if (sectionCode != null) {
            stmt.bindLong(3, sectionCode);
        }
 
        String sectionDescription = entity.getSectionDescription();
        if (sectionDescription != null) {
            stmt.bindString(4, sectionDescription);
        }
 
        String policy = entity.getPolicy();
        if (policy != null) {
            stmt.bindString(5, policy);
        }
 
        String endorsement = entity.getEndorsement();
        if (endorsement != null) {
            stmt.bindString(6, endorsement);
        }
 
        String feeDetail = entity.getFeeDetail();
        if (feeDetail != null) {
            stmt.bindString(7, feeDetail);
        }
 
        String ruc = entity.getRuc();
        if (ruc != null) {
            stmt.bindString(8, ruc);
        }
 
        String insurance = entity.getInsurance();
        if (insurance != null) {
            stmt.bindString(9, insurance);
        }
 
        String comercialPhone = entity.getComercialPhone();
        if (comercialPhone != null) {
            stmt.bindString(10, comercialPhone);
        }
 
        String comercialAddress = entity.getComercialAddress();
        if (comercialAddress != null) {
            stmt.bindString(11, comercialAddress);
        }
 
        String parcitularAddress = entity.getParcitularAddress();
        if (parcitularAddress != null) {
            stmt.bindString(12, parcitularAddress);
        }
 
        String dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindString(13, dateFrom);
        }
 
        String dateTo = entity.getDateTo();
        if (dateTo != null) {
            stmt.bindString(14, dateTo);
        }
 
        String issue = entity.getIssue();
        if (issue != null) {
            stmt.bindString(15, issue);
        }
 
        String expiration = entity.getExpiration();
        if (expiration != null) {
            stmt.bindString(16, expiration);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(17, amount);
        }
 
        String payment = entity.getPayment();
        if (payment != null) {
            stmt.bindString(18, payment);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(19, balance);
        }
 
        String lastPayment = entity.getLastPayment();
        if (lastPayment != null) {
            stmt.bindString(20, lastPayment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Insurance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String identifyCard = entity.getIdentifyCard();
        if (identifyCard != null) {
            stmt.bindString(2, identifyCard);
        }
 
        Integer sectionCode = entity.getSectionCode();
        if (sectionCode != null) {
            stmt.bindLong(3, sectionCode);
        }
 
        String sectionDescription = entity.getSectionDescription();
        if (sectionDescription != null) {
            stmt.bindString(4, sectionDescription);
        }
 
        String policy = entity.getPolicy();
        if (policy != null) {
            stmt.bindString(5, policy);
        }
 
        String endorsement = entity.getEndorsement();
        if (endorsement != null) {
            stmt.bindString(6, endorsement);
        }
 
        String feeDetail = entity.getFeeDetail();
        if (feeDetail != null) {
            stmt.bindString(7, feeDetail);
        }
 
        String ruc = entity.getRuc();
        if (ruc != null) {
            stmt.bindString(8, ruc);
        }
 
        String insurance = entity.getInsurance();
        if (insurance != null) {
            stmt.bindString(9, insurance);
        }
 
        String comercialPhone = entity.getComercialPhone();
        if (comercialPhone != null) {
            stmt.bindString(10, comercialPhone);
        }
 
        String comercialAddress = entity.getComercialAddress();
        if (comercialAddress != null) {
            stmt.bindString(11, comercialAddress);
        }
 
        String parcitularAddress = entity.getParcitularAddress();
        if (parcitularAddress != null) {
            stmt.bindString(12, parcitularAddress);
        }
 
        String dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindString(13, dateFrom);
        }
 
        String dateTo = entity.getDateTo();
        if (dateTo != null) {
            stmt.bindString(14, dateTo);
        }
 
        String issue = entity.getIssue();
        if (issue != null) {
            stmt.bindString(15, issue);
        }
 
        String expiration = entity.getExpiration();
        if (expiration != null) {
            stmt.bindString(16, expiration);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(17, amount);
        }
 
        String payment = entity.getPayment();
        if (payment != null) {
            stmt.bindString(18, payment);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(19, balance);
        }
 
        String lastPayment = entity.getLastPayment();
        if (lastPayment != null) {
            stmt.bindString(20, lastPayment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Insurance readEntity(Cursor cursor, int offset) {
        Insurance entity = new Insurance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // identifyCard
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sectionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sectionDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // policy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endorsement
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // feeDetail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ruc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // insurance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comercialPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comercialAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // parcitularAddress
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dateFrom
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // dateTo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // issue
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // expiration
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // amount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // payment
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // balance
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // lastPayment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Insurance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifyCard(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSectionCode(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSectionDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPolicy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndorsement(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFeeDetail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRuc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInsurance(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComercialPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComercialAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParcitularAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDateFrom(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDateTo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIssue(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setExpiration(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAmount(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPayment(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBalance(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLastPayment(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Insurance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Insurance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Insurance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
